/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AirPollutants;
import io.swagger.client.model.Amount;
import io.swagger.client.model.BookingRule;
import io.swagger.client.model.DynamicSpeed;
import io.swagger.client.model.Elevation;
import io.swagger.client.model.Journey;
import io.swagger.client.model.LinkSchema;
import io.swagger.client.model.LowEmissionZone;
import io.swagger.client.model.Path;
import io.swagger.client.model.PathWay;
import io.swagger.client.model.Place;
import io.swagger.client.model.RidesharingInformation;
import io.swagger.client.model.SectionGeoJsonSchema;
import io.swagger.client.model.StopDateTime;
import io.swagger.client.model.StreetInformation;
import io.swagger.client.model.VJDisplayInformation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Section
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-01-15T18:02:06.472Z")
public class Section {
  @SerializedName("id")
  private String id = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("co2_emission")
  private Amount co2Emission = null;

  @SerializedName("air_pollutants")
  private AirPollutants airPollutants = null;

  @SerializedName("low_emission_zone")
  private LowEmissionZone lowEmissionZone = null;

  /**
   * Gets or Sets transferType
   */
  @JsonAdapter(TransferTypeEnum.Adapter.class)
  public enum TransferTypeEnum {
    WALKING("walking"),

    STAY_IN("stay_in");

    private String value;

    TransferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferTypeEnum fromValue(String text) {
      for (TransferTypeEnum b : TransferTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransferTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transfer_type")
  private TransferTypeEnum transferType = null;

  @SerializedName("departure_date_time")
  private String departureDateTime = null;

  @SerializedName("arrival_date_time")
  private String arrivalDateTime = null;

  @SerializedName("base_departure_date_time")
  private String baseDepartureDateTime = null;

  @SerializedName("base_arrival_date_time")
  private String baseArrivalDateTime = null;

  /**
   * Gets or Sets dataFreshness
   */
  @JsonAdapter(DataFreshnessEnum.Adapter.class)
  public enum DataFreshnessEnum {
    BASE_SCHEDULE("base_schedule"),

    ADAPTED_SCHEDULE("adapted_schedule"),

    REALTIME("realtime");

    private String value;

    DataFreshnessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFreshnessEnum fromValue(String text) {
      for (DataFreshnessEnum b : DataFreshnessEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DataFreshnessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFreshnessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFreshnessEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DataFreshnessEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("data_freshness")
  private DataFreshnessEnum dataFreshness = null;

  @SerializedName("to")
  private Place to = null;

  @SerializedName("from")
  private Place from = null;

  /**
   * Gets or Sets additionalInformations
   */
  @JsonAdapter(AdditionalInformationsEnum.Adapter.class)
  public enum AdditionalInformationsEnum {
    ODT_WITH_ZONE("odt_with_zone"),

    ODT_WITH_STOP_POINT("odt_with_stop_point"),

    ODT_WITH_STOP_TIME("odt_with_stop_time"),

    HAS_DATETIME_ESTIMATED("has_datetime_estimated"),

    REGULAR("regular"),

    STAY_IN("stay_in");

    private String value;

    AdditionalInformationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalInformationsEnum fromValue(String text) {
      for (AdditionalInformationsEnum b : AdditionalInformationsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdditionalInformationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalInformationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalInformationsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdditionalInformationsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("additional_informations")
  private List<AdditionalInformationsEnum> additionalInformations = null;

  @SerializedName("geojson")
  private SectionGeoJsonSchema geojson = null;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    WALKING("walking"),

    BIKE("bike"),

    CAR("car"),

    BSS("bss"),

    RIDESHARING("ridesharing"),

    CARNOPARK("carnopark"),

    TAXI("taxi");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PUBLIC_TRANSPORT("public_transport"),

    STREET_NETWORK("street_network"),

    WAITING("waiting"),

    TRANSFER("transfer"),

    BOARDING("boarding"),

    LANDING("landing"),

    BSS_RENT("bss_rent"),

    BSS_PUT_BACK("bss_put_back"),

    CROW_FLY("crow_fly"),

    PARK("park"),

    LEAVE_PARKING("leave_parking"),

    ALIGHTING("alighting"),

    RIDESHARING("ridesharing"),

    ON_DEMAND_TRANSPORT("on_demand_transport");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("display_informations")
  private VJDisplayInformation displayInformations = null;

  @SerializedName("links")
  private List<LinkSchema> links = new ArrayList<LinkSchema>();

  @SerializedName("stop_date_times")
  private List<StopDateTime> stopDateTimes = null;

  @SerializedName("path")
  private List<Path> path = null;

  @SerializedName("ridesharing_informations")
  private RidesharingInformation ridesharingInformations = null;

  @SerializedName("ridesharing_journeys")
  private List<Journey> ridesharingJourneys = null;

  /**
   * Gets or Sets bestBoardingPositions
   */
  @JsonAdapter(BestBoardingPositionsEnum.Adapter.class)
  public enum BestBoardingPositionsEnum {
    FRONT("front"),

    MIDDLE("middle"),

    BACK("back");

    private String value;

    BestBoardingPositionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BestBoardingPositionsEnum fromValue(String text) {
      for (BestBoardingPositionsEnum b : BestBoardingPositionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BestBoardingPositionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BestBoardingPositionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BestBoardingPositionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BestBoardingPositionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("best_boarding_positions")
  private List<BestBoardingPositionsEnum> bestBoardingPositions = null;

  @SerializedName("cycle_lane_length")
  private Integer cycleLaneLength = null;

  @SerializedName("elevations")
  private List<Elevation> elevations = null;

  @SerializedName("dynamic_speeds")
  private List<DynamicSpeed> dynamicSpeeds = null;

  @SerializedName("vias")
  private List<PathWay> vias = null;

  @SerializedName("street_informations")
  private List<StreetInformation> streetInformations = null;

  @SerializedName("booking_rule")
  private BookingRule bookingRule = null;

  public Section id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Section duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Duration of the section (seconds)
   * @return duration
  **/
  @ApiModelProperty(required = true, value = "Duration of the section (seconds)")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public Section co2Emission(Amount co2Emission) {
    this.co2Emission = co2Emission;
    return this;
  }

   /**
   * Get co2Emission
   * @return co2Emission
  **/
  @ApiModelProperty(required = true, value = "")
  public Amount getCo2Emission() {
    return co2Emission;
  }

  public void setCo2Emission(Amount co2Emission) {
    this.co2Emission = co2Emission;
  }

  public Section airPollutants(AirPollutants airPollutants) {
    this.airPollutants = airPollutants;
    return this;
  }

   /**
   * Get airPollutants
   * @return airPollutants
  **/
  @ApiModelProperty(value = "")
  public AirPollutants getAirPollutants() {
    return airPollutants;
  }

  public void setAirPollutants(AirPollutants airPollutants) {
    this.airPollutants = airPollutants;
  }

  public Section lowEmissionZone(LowEmissionZone lowEmissionZone) {
    this.lowEmissionZone = lowEmissionZone;
    return this;
  }

   /**
   * Get lowEmissionZone
   * @return lowEmissionZone
  **/
  @ApiModelProperty(value = "")
  public LowEmissionZone getLowEmissionZone() {
    return lowEmissionZone;
  }

  public void setLowEmissionZone(LowEmissionZone lowEmissionZone) {
    this.lowEmissionZone = lowEmissionZone;
  }

  public Section transferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
    return this;
  }

   /**
   * Get transferType
   * @return transferType
  **/
  @ApiModelProperty(value = "")
  public TransferTypeEnum getTransferType() {
    return transferType;
  }

  public void setTransferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
  }

  public Section departureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

   /**
   * Departure date and time of the section
   * @return departureDateTime
  **/
  @ApiModelProperty(value = "Departure date and time of the section")
  public String getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
  }

  public Section arrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

   /**
   * Arrival date and time of the section
   * @return arrivalDateTime
  **/
  @ApiModelProperty(value = "Arrival date and time of the section")
  public String getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }

  public Section baseDepartureDateTime(String baseDepartureDateTime) {
    this.baseDepartureDateTime = baseDepartureDateTime;
    return this;
  }

   /**
   * Base-schedule departure date and time of the section
   * @return baseDepartureDateTime
  **/
  @ApiModelProperty(value = "Base-schedule departure date and time of the section")
  public String getBaseDepartureDateTime() {
    return baseDepartureDateTime;
  }

  public void setBaseDepartureDateTime(String baseDepartureDateTime) {
    this.baseDepartureDateTime = baseDepartureDateTime;
  }

  public Section baseArrivalDateTime(String baseArrivalDateTime) {
    this.baseArrivalDateTime = baseArrivalDateTime;
    return this;
  }

   /**
   * Base-schedule arrival date and time of the section
   * @return baseArrivalDateTime
  **/
  @ApiModelProperty(value = "Base-schedule arrival date and time of the section")
  public String getBaseArrivalDateTime() {
    return baseArrivalDateTime;
  }

  public void setBaseArrivalDateTime(String baseArrivalDateTime) {
    this.baseArrivalDateTime = baseArrivalDateTime;
  }

  public Section dataFreshness(DataFreshnessEnum dataFreshness) {
    this.dataFreshness = dataFreshness;
    return this;
  }

   /**
   * Get dataFreshness
   * @return dataFreshness
  **/
  @ApiModelProperty(value = "")
  public DataFreshnessEnum getDataFreshness() {
    return dataFreshness;
  }

  public void setDataFreshness(DataFreshnessEnum dataFreshness) {
    this.dataFreshness = dataFreshness;
  }

  public Section to(Place to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @ApiModelProperty(value = "")
  public Place getTo() {
    return to;
  }

  public void setTo(Place to) {
    this.to = to;
  }

  public Section from(Place from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @ApiModelProperty(value = "")
  public Place getFrom() {
    return from;
  }

  public void setFrom(Place from) {
    this.from = from;
  }

  public Section additionalInformations(List<AdditionalInformationsEnum> additionalInformations) {
    this.additionalInformations = additionalInformations;
    return this;
  }

  public Section addAdditionalInformationsItem(AdditionalInformationsEnum additionalInformationsItem) {
    if (this.additionalInformations == null) {
      this.additionalInformations = new ArrayList<AdditionalInformationsEnum>();
    }
    this.additionalInformations.add(additionalInformationsItem);
    return this;
  }

   /**
   * Get additionalInformations
   * @return additionalInformations
  **/
  @ApiModelProperty(value = "")
  public List<AdditionalInformationsEnum> getAdditionalInformations() {
    return additionalInformations;
  }

  public void setAdditionalInformations(List<AdditionalInformationsEnum> additionalInformations) {
    this.additionalInformations = additionalInformations;
  }

  public Section geojson(SectionGeoJsonSchema geojson) {
    this.geojson = geojson;
    return this;
  }

   /**
   * GeoJSON of the shape of the section
   * @return geojson
  **/
  @ApiModelProperty(value = "GeoJSON of the shape of the section")
  public SectionGeoJsonSchema getGeojson() {
    return geojson;
  }

  public void setGeojson(SectionGeoJsonSchema geojson) {
    this.geojson = geojson;
  }

  public Section mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @ApiModelProperty(value = "")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public Section type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Section displayInformations(VJDisplayInformation displayInformations) {
    this.displayInformations = displayInformations;
    return this;
  }

   /**
   * Get displayInformations
   * @return displayInformations
  **/
  @ApiModelProperty(value = "")
  public VJDisplayInformation getDisplayInformations() {
    return displayInformations;
  }

  public void setDisplayInformations(VJDisplayInformation displayInformations) {
    this.displayInformations = displayInformations;
  }

  public Section links(List<LinkSchema> links) {
    this.links = links;
    return this;
  }

  public Section addLinksItem(LinkSchema linksItem) {
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(required = true, value = "")
  public List<LinkSchema> getLinks() {
    return links;
  }

  public void setLinks(List<LinkSchema> links) {
    this.links = links;
  }

  public Section stopDateTimes(List<StopDateTime> stopDateTimes) {
    this.stopDateTimes = stopDateTimes;
    return this;
  }

  public Section addStopDateTimesItem(StopDateTime stopDateTimesItem) {
    if (this.stopDateTimes == null) {
      this.stopDateTimes = new ArrayList<StopDateTime>();
    }
    this.stopDateTimes.add(stopDateTimesItem);
    return this;
  }

   /**
   * Get stopDateTimes
   * @return stopDateTimes
  **/
  @ApiModelProperty(value = "")
  public List<StopDateTime> getStopDateTimes() {
    return stopDateTimes;
  }

  public void setStopDateTimes(List<StopDateTime> stopDateTimes) {
    this.stopDateTimes = stopDateTimes;
  }

  public Section path(List<Path> path) {
    this.path = path;
    return this;
  }

  public Section addPathItem(Path pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<Path>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(value = "")
  public List<Path> getPath() {
    return path;
  }

  public void setPath(List<Path> path) {
    this.path = path;
  }

  public Section ridesharingInformations(RidesharingInformation ridesharingInformations) {
    this.ridesharingInformations = ridesharingInformations;
    return this;
  }

   /**
   * Get ridesharingInformations
   * @return ridesharingInformations
  **/
  @ApiModelProperty(value = "")
  public RidesharingInformation getRidesharingInformations() {
    return ridesharingInformations;
  }

  public void setRidesharingInformations(RidesharingInformation ridesharingInformations) {
    this.ridesharingInformations = ridesharingInformations;
  }

  public Section ridesharingJourneys(List<Journey> ridesharingJourneys) {
    this.ridesharingJourneys = ridesharingJourneys;
    return this;
  }

  public Section addRidesharingJourneysItem(Journey ridesharingJourneysItem) {
    if (this.ridesharingJourneys == null) {
      this.ridesharingJourneys = new ArrayList<Journey>();
    }
    this.ridesharingJourneys.add(ridesharingJourneysItem);
    return this;
  }

   /**
   * Get ridesharingJourneys
   * @return ridesharingJourneys
  **/
  @ApiModelProperty(value = "")
  public List<Journey> getRidesharingJourneys() {
    return ridesharingJourneys;
  }

  public void setRidesharingJourneys(List<Journey> ridesharingJourneys) {
    this.ridesharingJourneys = ridesharingJourneys;
  }

  public Section bestBoardingPositions(List<BestBoardingPositionsEnum> bestBoardingPositions) {
    this.bestBoardingPositions = bestBoardingPositions;
    return this;
  }

  public Section addBestBoardingPositionsItem(BestBoardingPositionsEnum bestBoardingPositionsItem) {
    if (this.bestBoardingPositions == null) {
      this.bestBoardingPositions = new ArrayList<BestBoardingPositionsEnum>();
    }
    this.bestBoardingPositions.add(bestBoardingPositionsItem);
    return this;
  }

   /**
   * Get bestBoardingPositions
   * @return bestBoardingPositions
  **/
  @ApiModelProperty(value = "")
  public List<BestBoardingPositionsEnum> getBestBoardingPositions() {
    return bestBoardingPositions;
  }

  public void setBestBoardingPositions(List<BestBoardingPositionsEnum> bestBoardingPositions) {
    this.bestBoardingPositions = bestBoardingPositions;
  }

  public Section cycleLaneLength(Integer cycleLaneLength) {
    this.cycleLaneLength = cycleLaneLength;
    return this;
  }

   /**
   * Get cycleLaneLength
   * @return cycleLaneLength
  **/
  @ApiModelProperty(value = "")
  public Integer getCycleLaneLength() {
    return cycleLaneLength;
  }

  public void setCycleLaneLength(Integer cycleLaneLength) {
    this.cycleLaneLength = cycleLaneLength;
  }

  public Section elevations(List<Elevation> elevations) {
    this.elevations = elevations;
    return this;
  }

  public Section addElevationsItem(Elevation elevationsItem) {
    if (this.elevations == null) {
      this.elevations = new ArrayList<Elevation>();
    }
    this.elevations.add(elevationsItem);
    return this;
  }

   /**
   * Get elevations
   * @return elevations
  **/
  @ApiModelProperty(value = "")
  public List<Elevation> getElevations() {
    return elevations;
  }

  public void setElevations(List<Elevation> elevations) {
    this.elevations = elevations;
  }

  public Section dynamicSpeeds(List<DynamicSpeed> dynamicSpeeds) {
    this.dynamicSpeeds = dynamicSpeeds;
    return this;
  }

  public Section addDynamicSpeedsItem(DynamicSpeed dynamicSpeedsItem) {
    if (this.dynamicSpeeds == null) {
      this.dynamicSpeeds = new ArrayList<DynamicSpeed>();
    }
    this.dynamicSpeeds.add(dynamicSpeedsItem);
    return this;
  }

   /**
   * Get dynamicSpeeds
   * @return dynamicSpeeds
  **/
  @ApiModelProperty(value = "")
  public List<DynamicSpeed> getDynamicSpeeds() {
    return dynamicSpeeds;
  }

  public void setDynamicSpeeds(List<DynamicSpeed> dynamicSpeeds) {
    this.dynamicSpeeds = dynamicSpeeds;
  }

  public Section vias(List<PathWay> vias) {
    this.vias = vias;
    return this;
  }

  public Section addViasItem(PathWay viasItem) {
    if (this.vias == null) {
      this.vias = new ArrayList<PathWay>();
    }
    this.vias.add(viasItem);
    return this;
  }

   /**
   * Get vias
   * @return vias
  **/
  @ApiModelProperty(value = "")
  public List<PathWay> getVias() {
    return vias;
  }

  public void setVias(List<PathWay> vias) {
    this.vias = vias;
  }

  public Section streetInformations(List<StreetInformation> streetInformations) {
    this.streetInformations = streetInformations;
    return this;
  }

  public Section addStreetInformationsItem(StreetInformation streetInformationsItem) {
    if (this.streetInformations == null) {
      this.streetInformations = new ArrayList<StreetInformation>();
    }
    this.streetInformations.add(streetInformationsItem);
    return this;
  }

   /**
   * Get streetInformations
   * @return streetInformations
  **/
  @ApiModelProperty(value = "")
  public List<StreetInformation> getStreetInformations() {
    return streetInformations;
  }

  public void setStreetInformations(List<StreetInformation> streetInformations) {
    this.streetInformations = streetInformations;
  }

  public Section bookingRule(BookingRule bookingRule) {
    this.bookingRule = bookingRule;
    return this;
  }

   /**
   * Get bookingRule
   * @return bookingRule
  **/
  @ApiModelProperty(value = "")
  public BookingRule getBookingRule() {
    return bookingRule;
  }

  public void setBookingRule(BookingRule bookingRule) {
    this.bookingRule = bookingRule;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Section section = (Section) o;
    return Objects.equals(this.id, section.id) &&
        Objects.equals(this.duration, section.duration) &&
        Objects.equals(this.co2Emission, section.co2Emission) &&
        Objects.equals(this.airPollutants, section.airPollutants) &&
        Objects.equals(this.lowEmissionZone, section.lowEmissionZone) &&
        Objects.equals(this.transferType, section.transferType) &&
        Objects.equals(this.departureDateTime, section.departureDateTime) &&
        Objects.equals(this.arrivalDateTime, section.arrivalDateTime) &&
        Objects.equals(this.baseDepartureDateTime, section.baseDepartureDateTime) &&
        Objects.equals(this.baseArrivalDateTime, section.baseArrivalDateTime) &&
        Objects.equals(this.dataFreshness, section.dataFreshness) &&
        Objects.equals(this.to, section.to) &&
        Objects.equals(this.from, section.from) &&
        Objects.equals(this.additionalInformations, section.additionalInformations) &&
        Objects.equals(this.geojson, section.geojson) &&
        Objects.equals(this.mode, section.mode) &&
        Objects.equals(this.type, section.type) &&
        Objects.equals(this.displayInformations, section.displayInformations) &&
        Objects.equals(this.links, section.links) &&
        Objects.equals(this.stopDateTimes, section.stopDateTimes) &&
        Objects.equals(this.path, section.path) &&
        Objects.equals(this.ridesharingInformations, section.ridesharingInformations) &&
        Objects.equals(this.ridesharingJourneys, section.ridesharingJourneys) &&
        Objects.equals(this.bestBoardingPositions, section.bestBoardingPositions) &&
        Objects.equals(this.cycleLaneLength, section.cycleLaneLength) &&
        Objects.equals(this.elevations, section.elevations) &&
        Objects.equals(this.dynamicSpeeds, section.dynamicSpeeds) &&
        Objects.equals(this.vias, section.vias) &&
        Objects.equals(this.streetInformations, section.streetInformations) &&
        Objects.equals(this.bookingRule, section.bookingRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, duration, co2Emission, airPollutants, lowEmissionZone, transferType, departureDateTime, arrivalDateTime, baseDepartureDateTime, baseArrivalDateTime, dataFreshness, to, from, additionalInformations, geojson, mode, type, displayInformations, links, stopDateTimes, path, ridesharingInformations, ridesharingJourneys, bestBoardingPositions, cycleLaneLength, elevations, dynamicSpeeds, vias, streetInformations, bookingRule);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Section {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    co2Emission: ").append(toIndentedString(co2Emission)).append("\n");
    sb.append("    airPollutants: ").append(toIndentedString(airPollutants)).append("\n");
    sb.append("    lowEmissionZone: ").append(toIndentedString(lowEmissionZone)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    baseDepartureDateTime: ").append(toIndentedString(baseDepartureDateTime)).append("\n");
    sb.append("    baseArrivalDateTime: ").append(toIndentedString(baseArrivalDateTime)).append("\n");
    sb.append("    dataFreshness: ").append(toIndentedString(dataFreshness)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    additionalInformations: ").append(toIndentedString(additionalInformations)).append("\n");
    sb.append("    geojson: ").append(toIndentedString(geojson)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayInformations: ").append(toIndentedString(displayInformations)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    stopDateTimes: ").append(toIndentedString(stopDateTimes)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    ridesharingInformations: ").append(toIndentedString(ridesharingInformations)).append("\n");
    sb.append("    ridesharingJourneys: ").append(toIndentedString(ridesharingJourneys)).append("\n");
    sb.append("    bestBoardingPositions: ").append(toIndentedString(bestBoardingPositions)).append("\n");
    sb.append("    cycleLaneLength: ").append(toIndentedString(cycleLaneLength)).append("\n");
    sb.append("    elevations: ").append(toIndentedString(elevations)).append("\n");
    sb.append("    dynamicSpeeds: ").append(toIndentedString(dynamicSpeeds)).append("\n");
    sb.append("    vias: ").append(toIndentedString(vias)).append("\n");
    sb.append("    streetInformations: ").append(toIndentedString(streetInformations)).append("\n");
    sb.append("    bookingRule: ").append(toIndentedString(bookingRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

