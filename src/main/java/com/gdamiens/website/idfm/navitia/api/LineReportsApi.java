/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.LineReports;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineReportsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public LineReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getCoverageLonLatLineReports
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatLineReportsCall(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/line_reports"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (filterStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter_status[]", filterStatus));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatLineReportsValidateBeforeCall(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatLineReports(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatLineReports(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsCall(lon, lat, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineReports getCoverageLonLatLineReports(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageLonLatLineReportsWithHttpInfo(lon, lat, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineReports> getCoverageLonLatLineReportsWithHttpInfo(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsValidateBeforeCall(lon, lat, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatLineReportsAsync(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsValidateBeforeCall(lon, lat, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageLonLatUriLineReports
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriLineReportsCall(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/line_reports"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (filterStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter_status[]", filterStatus));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriLineReportsValidateBeforeCall(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriLineReports(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriLineReports(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriLineReports(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsCall(lon, lat, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineReports getCoverageLonLatUriLineReports(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageLonLatUriLineReportsWithHttpInfo(lon, lat, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineReports> getCoverageLonLatUriLineReportsWithHttpInfo(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsValidateBeforeCall(lon, lat, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriLineReportsAsync(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsValidateBeforeCall(lon, lat, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionLineReports
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionLineReportsCall(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/line_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (filterStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter_status[]", filterStatus));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionLineReportsValidateBeforeCall(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionLineReports(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionLineReportsCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineReports getCoverageRegionLineReports(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageRegionLineReportsWithHttpInfo(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineReports> getCoverageRegionLineReportsWithHttpInfo(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionLineReportsValidateBeforeCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionLineReportsAsync(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionLineReportsValidateBeforeCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionUriLineReports
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriLineReportsCall(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/line_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (filterStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter_status[]", filterStatus));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriLineReportsValidateBeforeCall(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriLineReports(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriLineReports(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineReports getCoverageRegionUriLineReports(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageRegionUriLineReportsWithHttpInfo(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineReports> getCoverageRegionUriLineReportsWithHttpInfo(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsValidateBeforeCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param filterStatus filter_status uris (optional)
     * @param language Here, select a specific language for disruption message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriLineReportsAsync(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, OffsetDateTime since, OffsetDateTime until, List<String> filterStatus, String language, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsValidateBeforeCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, filterStatus, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
