/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Calendars;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public CalendarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getCoverageLonLatCalendars
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatCalendarsCall(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/calendars"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatCalendarsValidateBeforeCall(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCalendars(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCalendars(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsCall(lon, lat, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageLonLatCalendars(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageLonLatCalendarsWithHttpInfo(lon, lat, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageLonLatCalendarsWithHttpInfo(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsValidateBeforeCall(lon, lat, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatCalendarsAsync(BigDecimal lon, BigDecimal lat, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsValidateBeforeCall(lon, lat, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageLonLatCalendarsId
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatCalendarsIdCall(BigDecimal lon, BigDecimal lat, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/calendars/{id}"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatCalendarsIdValidateBeforeCall(BigDecimal lon, BigDecimal lat, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCalendarsId(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCalendarsId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatCalendarsId(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsIdCall(lon, lat, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageLonLatCalendarsId(BigDecimal lon, BigDecimal lat, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageLonLatCalendarsIdWithHttpInfo(lon, lat, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageLonLatCalendarsIdWithHttpInfo(BigDecimal lon, BigDecimal lat, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsIdValidateBeforeCall(lon, lat, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatCalendarsIdAsync(BigDecimal lon, BigDecimal lat, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCalendarsIdValidateBeforeCall(lon, lat, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageLonLatUriCalendars
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriCalendarsCall(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/calendars"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriCalendarsValidateBeforeCall(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCalendars(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCalendars(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCalendars(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatUriCalendarsCall(lon, lat, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageLonLatUriCalendars(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageLonLatUriCalendarsWithHttpInfo(lon, lat, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageLonLatUriCalendarsWithHttpInfo(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriCalendarsValidateBeforeCall(lon, lat, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriCalendarsAsync(BigDecimal lon, BigDecimal lat, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriCalendarsValidateBeforeCall(lon, lat, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionCalendars
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionCalendarsCall(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/calendars"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCalendarsValidateBeforeCall(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCalendars(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionCalendarsCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageRegionCalendars(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionCalendarsWithHttpInfo(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageRegionCalendarsWithHttpInfo(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCalendarsValidateBeforeCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionCalendarsAsync(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsValidateBeforeCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionCalendarsId
     * @param region The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionCalendarsIdCall(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/calendars/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCalendarsIdValidateBeforeCall(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCalendarsId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionCalendarsId(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageRegionCalendarsId(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionCalendarsIdWithHttpInfo(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageRegionCalendarsIdWithHttpInfo(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdValidateBeforeCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionCalendarsIdAsync(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdValidateBeforeCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionUriCalendars
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriCalendarsCall(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/calendars"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriCalendarsValidateBeforeCall(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCalendars(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCalendars(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Calendars getCoverageRegionUriCalendars(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionUriCalendarsWithHttpInfo(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Calendars> getCoverageRegionUriCalendarsWithHttpInfo(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsValidateBeforeCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriCalendarsAsync(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsValidateBeforeCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
