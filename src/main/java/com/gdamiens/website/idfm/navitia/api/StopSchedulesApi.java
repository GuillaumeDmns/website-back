/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.StopSchedules;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StopSchedulesApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public StopSchedulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StopSchedulesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getCoverageLonLatUriStopSchedules
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriStopSchedulesCall(BigDecimal lon, BigDecimal lat, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/stop_schedules"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (fromDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_datetime", fromDatetime));
        if (untilDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until_datetime", untilDatetime));
        if (duration != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration", duration));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (maxDateTimes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_date_times", maxDateTimes));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calendar", calendar));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (dataFreshness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (directionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction_type", directionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriStopSchedulesValidateBeforeCall(BigDecimal lon, BigDecimal lat, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriStopSchedules(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriStopSchedules(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriStopSchedules(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatUriStopSchedulesCall(lon, lat, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return StopSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopSchedules getCoverageLonLatUriStopSchedules(BigDecimal lon, BigDecimal lat, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        ApiResponse<StopSchedules> resp = getCoverageLonLatUriStopSchedulesWithHttpInfo(lon, lat, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return ApiResponse&lt;StopSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopSchedules> getCoverageLonLatUriStopSchedulesWithHttpInfo(BigDecimal lon, BigDecimal lat, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriStopSchedulesValidateBeforeCall(lon, lat, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, null, null);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriStopSchedulesAsync(BigDecimal lon, BigDecimal lat, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ApiCallback<StopSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriStopSchedulesValidateBeforeCall(lon, lat, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionUriStopSchedules
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriStopSchedulesCall(String region, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/stop_schedules"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (fromDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_datetime", fromDatetime));
        if (untilDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until_datetime", untilDatetime));
        if (duration != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration", duration));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (maxDateTimes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_date_times", maxDateTimes));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calendar", calendar));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (dataFreshness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (directionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction_type", directionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriStopSchedulesValidateBeforeCall(String region, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriStopSchedules(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriStopSchedules(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionUriStopSchedulesCall(region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return StopSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopSchedules getCoverageRegionUriStopSchedules(String region, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        ApiResponse<StopSchedules> resp = getCoverageRegionUriStopSchedulesWithHttpInfo(region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return ApiResponse&lt;StopSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopSchedules> getCoverageRegionUriStopSchedulesWithHttpInfo(String region, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriStopSchedulesValidateBeforeCall(region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, null, null);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriStopSchedulesAsync(String region, String uri, String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ApiCallback<StopSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriStopSchedulesValidateBeforeCall(region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStopSchedules
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStopSchedulesCall(String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stop_schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (fromDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_datetime", fromDatetime));
        if (untilDatetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until_datetime", untilDatetime));
        if (duration != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("duration", duration));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));
        if (maxDateTimes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_date_times", maxDateTimes));
        if (forbiddenId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calendar", calendar));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (dataFreshness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disable_geojson", disableGeojson));
        if (directionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction_type", directionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStopSchedulesValidateBeforeCall(String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getStopSchedulesCall(filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return StopSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopSchedules getStopSchedules(String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        ApiResponse<StopSchedules> resp = getStopSchedulesWithHttpInfo(filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType);
        return resp.getData();
    }

    /**
     *
     *
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @return ApiResponse&lt;StopSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopSchedules> getStopSchedulesWithHttpInfo(String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType) throws ApiException {
        com.squareup.okhttp.Call call = getStopSchedulesValidateBeforeCall(filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, null, null);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86399)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param directionType Provide a route direction type to filter results. Note: forward is equivalent to clockwise and inbound. When you select forward, you filter with: [forward, clockwise, inbound]. On the other hand, backward is equivalent to anticlockwise and outbound. When you select backward, you filter with: [backward, anticlockwise, outbound]. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStopSchedulesAsync(String filter, OffsetDateTime fromDatetime, OffsetDateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, String directionType, final ApiCallback<StopSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStopSchedulesValidateBeforeCall(filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, dataFreshness, itemsPerSchedule, disableGeojson, directionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
