/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SectionGeoJsonSchemaProperties;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SectionGeoJsonSchema
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-01-15T18:02:06.472Z")
public class SectionGeoJsonSchema {
  @SerializedName("type")
  private String type = null;

  @SerializedName("properties")
  private List<SectionGeoJsonSchemaProperties> properties = null;

  @SerializedName("coordinates")
  private List<List<Float>> coordinates = null;

  public SectionGeoJsonSchema type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public SectionGeoJsonSchema properties(List<SectionGeoJsonSchemaProperties> properties) {
    this.properties = properties;
    return this;
  }

  public SectionGeoJsonSchema addPropertiesItem(SectionGeoJsonSchemaProperties propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<SectionGeoJsonSchemaProperties>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public List<SectionGeoJsonSchemaProperties> getProperties() {
    return properties;
  }

  public void setProperties(List<SectionGeoJsonSchemaProperties> properties) {
    this.properties = properties;
  }

  public SectionGeoJsonSchema coordinates(List<List<Float>> coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  public SectionGeoJsonSchema addCoordinatesItem(List<Float> coordinatesItem) {
    if (this.coordinates == null) {
      this.coordinates = new ArrayList<List<Float>>();
    }
    this.coordinates.add(coordinatesItem);
    return this;
  }

   /**
   * Get coordinates
   * @return coordinates
  **/
  @ApiModelProperty(value = "")
  public List<List<Float>> getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(List<List<Float>> coordinates) {
    this.coordinates = coordinates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SectionGeoJsonSchema sectionGeoJsonSchema = (SectionGeoJsonSchema) o;
    return Objects.equals(this.type, sectionGeoJsonSchema.type) &&
        Objects.equals(this.properties, sectionGeoJsonSchema.properties) &&
        Objects.equals(this.coordinates, sectionGeoJsonSchema.coordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, properties, coordinates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SectionGeoJsonSchema {\n");

    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

