/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.FreeFloatings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FreeFloatingsNearbyApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public FreeFloatingsNearbyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FreeFloatingsNearbyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getCoordLonLatFreefloatingsNearby
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoordLonLatFreefloatingsNearbyCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coord/{lon};{lat}/freefloatings_nearby"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoordLonLatFreefloatingsNearbyValidateBeforeCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordLonLatFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordLonLatFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoordLonLatFreefloatingsNearbyCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoordLonLatFreefloatingsNearby(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoordLonLatFreefloatingsNearbyWithHttpInfo(lon, lat, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoordLonLatFreefloatingsNearbyWithHttpInfo(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoordLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoordLonLatFreefloatingsNearbyAsync(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoordsLonLatFreefloatingsNearby
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoordsLonLatFreefloatingsNearbyCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coords/{lon};{lat}/freefloatings_nearby"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoordsLonLatFreefloatingsNearbyValidateBeforeCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordsLonLatFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordsLonLatFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoordsLonLatFreefloatingsNearbyCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoordsLonLatFreefloatingsNearby(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoordsLonLatFreefloatingsNearbyWithHttpInfo(lon, lat, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoordsLonLatFreefloatingsNearbyWithHttpInfo(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoordsLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoordsLonLatFreefloatingsNearbyAsync(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordsLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageLonLatFreefloatingsNearby
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatFreefloatingsNearbyCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/freefloatings_nearby"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatFreefloatingsNearbyValidateBeforeCall(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatFreefloatingsNearbyCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoverageLonLatFreefloatingsNearby(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoverageLonLatFreefloatingsNearbyWithHttpInfo(lon, lat, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoverageLonLatFreefloatingsNearbyWithHttpInfo(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatFreefloatingsNearbyAsync(BigDecimal lon, BigDecimal lat, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatFreefloatingsNearbyValidateBeforeCall(lon, lat, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageLonLatUriFreefloatingsNearby
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriFreefloatingsNearbyCall(BigDecimal lon, BigDecimal lat, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/freefloatings_nearby"
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapeString(lon.toString()))
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapeString(lat.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriFreefloatingsNearbyValidateBeforeCall(BigDecimal lon, BigDecimal lat, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageLonLatUriFreefloatingsNearbyCall(lon, lat, uri, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoverageLonLatUriFreefloatingsNearby(BigDecimal lon, BigDecimal lat, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoverageLonLatUriFreefloatingsNearbyWithHttpInfo(lon, lat, uri, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoverageLonLatUriFreefloatingsNearbyWithHttpInfo(BigDecimal lon, BigDecimal lat, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriFreefloatingsNearbyValidateBeforeCall(lon, lat, uri, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param lon The longitude of where the coord you want to query (required)
     * @param lat The latitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageLonLatUriFreefloatingsNearbyAsync(BigDecimal lon, BigDecimal lat, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriFreefloatingsNearbyValidateBeforeCall(lon, lat, uri, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionFreefloatingsNearby
     * @param region The region you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionFreefloatingsNearbyCall(String region, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/freefloatings_nearby"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionFreefloatingsNearbyValidateBeforeCall(String region, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionFreefloatingsNearbyCall(region, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoverageRegionFreefloatingsNearby(String region, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoverageRegionFreefloatingsNearbyWithHttpInfo(region, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoverageRegionFreefloatingsNearbyWithHttpInfo(String region, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionFreefloatingsNearbyValidateBeforeCall(region, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionFreefloatingsNearbyAsync(String region, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionFreefloatingsNearbyValidateBeforeCall(region, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoverageRegionUriFreefloatingsNearby
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriFreefloatingsNearbyCall(String region, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/freefloatings_nearby"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapeString(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (coord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coord", coord));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriFreefloatingsNearbyValidateBeforeCall(String region, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriFreefloatingsNearby(Async)");
        }

        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriFreefloatingsNearby(Async)");
        }


        com.squareup.okhttp.Call call = getCoverageRegionUriFreefloatingsNearbyCall(region, uri, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return FreeFloatings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeFloatings getCoverageRegionUriFreefloatingsNearby(String region, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        ApiResponse<FreeFloatings> resp = getCoverageRegionUriFreefloatingsNearbyWithHttpInfo(region, uri, type, distance, count, coord, startPage);
        return resp.getData();
    }

    /**
     *
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @return ApiResponse&lt;FreeFloatings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeFloatings> getCoverageRegionUriFreefloatingsNearbyWithHttpInfo(String region, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriFreefloatingsNearbyValidateBeforeCall(region, uri, type, distance, count, coord, startPage, null, null);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param region The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of free-floating objects to return (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param coord Coordinates longitude;latitude used to search the objects around this coordinate (optional)
     * @param startPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCoverageRegionUriFreefloatingsNearbyAsync(String region, String uri, List<String> type, Integer distance, Integer count, String coord, Integer startPage, final ApiCallback<FreeFloatings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriFreefloatingsNearbyValidateBeforeCall(region, uri, type, distance, count, coord, startPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeFloatings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
