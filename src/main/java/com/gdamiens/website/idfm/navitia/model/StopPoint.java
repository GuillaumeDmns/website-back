/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results
 *
 * OpenAPI spec version: v15.75.4
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.gdamiens.website.idfm.navitia.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Address;
import io.swagger.client.model.Admin;
import io.swagger.client.model.Code;
import io.swagger.client.model.Comment;
import io.swagger.client.model.CommercialMode;
import io.swagger.client.model.Coord;
import io.swagger.client.model.EquipmentDetails;
import io.swagger.client.model.FareZone;
import io.swagger.client.model.Line;
import io.swagger.client.model.LinkSchema;
import io.swagger.client.model.PathWay;
import io.swagger.client.model.PhysicalMode;
import io.swagger.client.model.StopArea;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * StopPoint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-01-15T18:02:06.472Z")
public class StopPoint {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("comments")
  private List<Comment> comments = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("codes")
  private List<Code> codes = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("coord")
  private Coord coord = null;

  @SerializedName("links")
  private List<LinkSchema> links = new ArrayList<LinkSchema>();

  @SerializedName("commercial_modes")
  private List<CommercialMode> commercialModes = null;

  @SerializedName("physical_modes")
  private List<PhysicalMode> physicalModes = null;

  @SerializedName("administrative_regions")
  private List<Admin> administrativeRegions = null;

  @SerializedName("stop_area")
  private StopArea stopArea = null;

  /**
   * Gets or Sets equipments
   */
  @JsonAdapter(EquipmentsEnum.Adapter.class)
  public enum EquipmentsEnum {
    WHEELCHAIR_ACCESSIBILITY("has_wheelchair_accessibility"),

    BIKE_ACCEPTED("has_bike_accepted"),

    AIR_CONDITIONED("has_air_conditioned"),

    VISUAL_ANNOUNCEMENT("has_visual_announcement"),

    AUDIBLE_ANNOUNCEMENT("has_audible_announcement"),

    APPROPRIATE_ESCORT("has_appropriate_escort"),

    APPROPRIATE_SIGNAGE("has_appropriate_signage"),

    SCHOOL_VEHICLE("has_school_vehicle"),

    WHEELCHAIR_BOARDING("has_wheelchair_boarding"),

    SHELTERED("has_sheltered"),

    ELEVATOR("has_elevator"),

    ESCALATOR("has_escalator"),

    BIKE_DEPOT("has_bike_depot");

    private String value;

    EquipmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EquipmentsEnum fromValue(String text) {
      for (EquipmentsEnum b : EquipmentsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EquipmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EquipmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EquipmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EquipmentsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("equipments")
  private List<EquipmentsEnum> equipments = new ArrayList<EquipmentsEnum>();

  @SerializedName("address")
  private Address address = null;

  @SerializedName("fare_zone")
  private FareZone fareZone = null;

  @SerializedName("equipment_details")
  private List<EquipmentDetails> equipmentDetails = null;

  @SerializedName("lines")
  private List<Line> lines = null;

  @SerializedName("access_points")
  private List<PathWay> accessPoints = null;

  public StopPoint id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the object
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Identifier of the object")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public StopPoint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the object
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the object")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StopPoint comments(List<Comment> comments) {
    this.comments = comments;
    return this;
  }

  public StopPoint addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comment>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @ApiModelProperty(value = "")
  public List<Comment> getComments() {
    return comments;
  }

  public void setComments(List<Comment> comments) {
    this.comments = comments;
  }

  public StopPoint comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public StopPoint codes(List<Code> codes) {
    this.codes = codes;
    return this;
  }

  public StopPoint addCodesItem(Code codesItem) {
    if (this.codes == null) {
      this.codes = new ArrayList<Code>();
    }
    this.codes.add(codesItem);
    return this;
  }

   /**
   * Get codes
   * @return codes
  **/
  @ApiModelProperty(value = "")
  public List<Code> getCodes() {
    return codes;
  }

  public void setCodes(List<Code> codes) {
    this.codes = codes;
  }

  public StopPoint label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @ApiModelProperty(value = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public StopPoint coord(Coord coord) {
    this.coord = coord;
    return this;
  }

   /**
   * Get coord
   * @return coord
  **/
  @ApiModelProperty(value = "")
  public Coord getCoord() {
    return coord;
  }

  public void setCoord(Coord coord) {
    this.coord = coord;
  }

  public StopPoint links(List<LinkSchema> links) {
    this.links = links;
    return this;
  }

  public StopPoint addLinksItem(LinkSchema linksItem) {
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(required = true, value = "")
  public List<LinkSchema> getLinks() {
    return links;
  }

  public void setLinks(List<LinkSchema> links) {
    this.links = links;
  }

  public StopPoint commercialModes(List<CommercialMode> commercialModes) {
    this.commercialModes = commercialModes;
    return this;
  }

  public StopPoint addCommercialModesItem(CommercialMode commercialModesItem) {
    if (this.commercialModes == null) {
      this.commercialModes = new ArrayList<CommercialMode>();
    }
    this.commercialModes.add(commercialModesItem);
    return this;
  }

   /**
   * Get commercialModes
   * @return commercialModes
  **/
  @ApiModelProperty(value = "")
  public List<CommercialMode> getCommercialModes() {
    return commercialModes;
  }

  public void setCommercialModes(List<CommercialMode> commercialModes) {
    this.commercialModes = commercialModes;
  }

  public StopPoint physicalModes(List<PhysicalMode> physicalModes) {
    this.physicalModes = physicalModes;
    return this;
  }

  public StopPoint addPhysicalModesItem(PhysicalMode physicalModesItem) {
    if (this.physicalModes == null) {
      this.physicalModes = new ArrayList<PhysicalMode>();
    }
    this.physicalModes.add(physicalModesItem);
    return this;
  }

   /**
   * Get physicalModes
   * @return physicalModes
  **/
  @ApiModelProperty(value = "")
  public List<PhysicalMode> getPhysicalModes() {
    return physicalModes;
  }

  public void setPhysicalModes(List<PhysicalMode> physicalModes) {
    this.physicalModes = physicalModes;
  }

  public StopPoint administrativeRegions(List<Admin> administrativeRegions) {
    this.administrativeRegions = administrativeRegions;
    return this;
  }

  public StopPoint addAdministrativeRegionsItem(Admin administrativeRegionsItem) {
    if (this.administrativeRegions == null) {
      this.administrativeRegions = new ArrayList<Admin>();
    }
    this.administrativeRegions.add(administrativeRegionsItem);
    return this;
  }

   /**
   * Get administrativeRegions
   * @return administrativeRegions
  **/
  @ApiModelProperty(value = "")
  public List<Admin> getAdministrativeRegions() {
    return administrativeRegions;
  }

  public void setAdministrativeRegions(List<Admin> administrativeRegions) {
    this.administrativeRegions = administrativeRegions;
  }

  public StopPoint stopArea(StopArea stopArea) {
    this.stopArea = stopArea;
    return this;
  }

   /**
   * Get stopArea
   * @return stopArea
  **/
  @ApiModelProperty(value = "")
  public StopArea getStopArea() {
    return stopArea;
  }

  public void setStopArea(StopArea stopArea) {
    this.stopArea = stopArea;
  }

  public StopPoint equipments(List<EquipmentsEnum> equipments) {
    this.equipments = equipments;
    return this;
  }

  public StopPoint addEquipmentsItem(EquipmentsEnum equipmentsItem) {
    this.equipments.add(equipmentsItem);
    return this;
  }

   /**
   * Get equipments
   * @return equipments
  **/
  @ApiModelProperty(required = true, value = "")
  public List<EquipmentsEnum> getEquipments() {
    return equipments;
  }

  public void setEquipments(List<EquipmentsEnum> equipments) {
    this.equipments = equipments;
  }

  public StopPoint address(Address address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @ApiModelProperty(value = "")
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }

  public StopPoint fareZone(FareZone fareZone) {
    this.fareZone = fareZone;
    return this;
  }

   /**
   * Get fareZone
   * @return fareZone
  **/
  @ApiModelProperty(value = "")
  public FareZone getFareZone() {
    return fareZone;
  }

  public void setFareZone(FareZone fareZone) {
    this.fareZone = fareZone;
  }

  public StopPoint equipmentDetails(List<EquipmentDetails> equipmentDetails) {
    this.equipmentDetails = equipmentDetails;
    return this;
  }

  public StopPoint addEquipmentDetailsItem(EquipmentDetails equipmentDetailsItem) {
    if (this.equipmentDetails == null) {
      this.equipmentDetails = new ArrayList<EquipmentDetails>();
    }
    this.equipmentDetails.add(equipmentDetailsItem);
    return this;
  }

   /**
   * Get equipmentDetails
   * @return equipmentDetails
  **/
  @ApiModelProperty(value = "")
  public List<EquipmentDetails> getEquipmentDetails() {
    return equipmentDetails;
  }

  public void setEquipmentDetails(List<EquipmentDetails> equipmentDetails) {
    this.equipmentDetails = equipmentDetails;
  }

  public StopPoint lines(List<Line> lines) {
    this.lines = lines;
    return this;
  }

  public StopPoint addLinesItem(Line linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<Line>();
    }
    this.lines.add(linesItem);
    return this;
  }

   /**
   * Get lines
   * @return lines
  **/
  @ApiModelProperty(value = "")
  public List<Line> getLines() {
    return lines;
  }

  public void setLines(List<Line> lines) {
    this.lines = lines;
  }

  public StopPoint accessPoints(List<PathWay> accessPoints) {
    this.accessPoints = accessPoints;
    return this;
  }

  public StopPoint addAccessPointsItem(PathWay accessPointsItem) {
    if (this.accessPoints == null) {
      this.accessPoints = new ArrayList<PathWay>();
    }
    this.accessPoints.add(accessPointsItem);
    return this;
  }

   /**
   * Get accessPoints
   * @return accessPoints
  **/
  @ApiModelProperty(value = "")
  public List<PathWay> getAccessPoints() {
    return accessPoints;
  }

  public void setAccessPoints(List<PathWay> accessPoints) {
    this.accessPoints = accessPoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopPoint stopPoint = (StopPoint) o;
    return Objects.equals(this.id, stopPoint.id) &&
        Objects.equals(this.name, stopPoint.name) &&
        Objects.equals(this.comments, stopPoint.comments) &&
        Objects.equals(this.comment, stopPoint.comment) &&
        Objects.equals(this.codes, stopPoint.codes) &&
        Objects.equals(this.label, stopPoint.label) &&
        Objects.equals(this.coord, stopPoint.coord) &&
        Objects.equals(this.links, stopPoint.links) &&
        Objects.equals(this.commercialModes, stopPoint.commercialModes) &&
        Objects.equals(this.physicalModes, stopPoint.physicalModes) &&
        Objects.equals(this.administrativeRegions, stopPoint.administrativeRegions) &&
        Objects.equals(this.stopArea, stopPoint.stopArea) &&
        Objects.equals(this.equipments, stopPoint.equipments) &&
        Objects.equals(this.address, stopPoint.address) &&
        Objects.equals(this.fareZone, stopPoint.fareZone) &&
        Objects.equals(this.equipmentDetails, stopPoint.equipmentDetails) &&
        Objects.equals(this.lines, stopPoint.lines) &&
        Objects.equals(this.accessPoints, stopPoint.accessPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, comments, comment, codes, label, coord, links, commercialModes, physicalModes, administrativeRegions, stopArea, equipments, address, fareZone, equipmentDetails, lines, accessPoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopPoint {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    coord: ").append(toIndentedString(coord)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    commercialModes: ").append(toIndentedString(commercialModes)).append("\n");
    sb.append("    physicalModes: ").append(toIndentedString(physicalModes)).append("\n");
    sb.append("    administrativeRegions: ").append(toIndentedString(administrativeRegions)).append("\n");
    sb.append("    stopArea: ").append(toIndentedString(stopArea)).append("\n");
    sb.append("    equipments: ").append(toIndentedString(equipments)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    fareZone: ").append(toIndentedString(fareZone)).append("\n");
    sb.append("    equipmentDetails: ").append(toIndentedString(equipmentDetails)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    accessPoints: ").append(toIndentedString(accessPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

